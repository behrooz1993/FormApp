package com.ahmadpour.formapp.data.db.models;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteException;
import android.util.Log;

import com.ahmadpour.formapp.utils.AppConstants;

import org.greenrobot.greendao.AbstractDaoMaster;
import org.greenrobot.greendao.database.StandardDatabase;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseOpenHelper;
import org.greenrobot.greendao.identityscope.IdentityScopeType;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * Master of DAO (schema version 1): knows all DAOs.
 */
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 1;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(Database db, boolean ifNotExists) {
        FormsDao.createTable(db, ifNotExists);
        QuestionsDao.createTable(db, ifNotExists);
        OptionsDao.createTable(db, ifNotExists);
        AnswersDao.createTable(db, ifNotExists);
    }

    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(Database db, boolean ifExists) {
        FormsDao.dropTable(db, ifExists);
        QuestionsDao.dropTable(db, ifExists);
        OptionsDao.dropTable(db, ifExists);
        AnswersDao.dropTable(db, ifExists);
    }

    /**
     * WARNING: Drops all table on Upgrade! Use only during development.
     * Convenience method using a {@link DevOpenHelper}.
     */
    public static DaoSession newDevSession(Context context, String name) {
        Database db = new DevOpenHelper(context, name,null).getWritableDb();
        DaoMaster daoMaster = new DaoMaster(db);
        return daoMaster.newSession();
    }

    public DaoMaster(SQLiteDatabase db) {
        this(new StandardDatabase(db));
    }

    public DaoMaster(Database db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(FormsDao.class);
        registerDaoClass(QuestionsDao.class);
        registerDaoClass(OptionsDao.class);
        registerDaoClass(AnswersDao.class);
    }

    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }

    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }

    /**
     * Calls {@link #createAllTables(Database, boolean)} in {@link #onCreate(Database)} -
     */
    public static abstract class OpenHelper extends DatabaseOpenHelper {
        public OpenHelper(Context context, String name) {
            super(context, name, SCHEMA_VERSION);
        }

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(Database db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }

    /** WARNING: Drops all table on Upgrade! Use only during development. */
//    public static class DevOpenHelper extends OpenHelper {
//        public DevOpenHelper(Context context, String name) {
//            super(context, name);
//        }
//
//        public DevOpenHelper(Context context, String name, CursorFactory factory) {
//            super(context, name, factory);
//        }
//
//        @Override
//        public void onUpgrade(Database db, int oldVersion, int newVersion) {
//            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
//            dropAllTables(db, true);
//            onCreate(db);
//        }
//    }

    public static class DevOpenHelper extends OpenHelper {
        private Context context;

        private SQLiteDatabase sqliteDatabase;

        private static String DB_PATH;

        private static String DB_NAME;

        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
            this.context = context;
            this.DB_NAME = name;
            this.DB_PATH = AppConstants.DB_PATH;
            try {
                createDataBase();
            } catch (Exception ioe) {
                throw new Error("Unable to create database");
            }
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            // TODO Auto-generated method stub

        }

        /** Open Database for Use */
        public SQLiteDatabase openDatabase() {
            String databasePath = DB_PATH + DB_NAME;
            sqliteDatabase = SQLiteDatabase.openDatabase(databasePath, null,
                    (SQLiteDatabase.OPEN_READWRITE));
            return sqliteDatabase;
        }

        /** Close Database after use */
        @Override
        public synchronized void close() {
            if ((sqliteDatabase != null) && sqliteDatabase.isOpen()) {
                sqliteDatabase.close();
            }
            super.close();
        }

        /** Get database instance for use */
        public SQLiteDatabase getSqliteDatabase() {
            return sqliteDatabase;
        }

        /** Create new database if not present */
        public void createDataBase() {
            SQLiteDatabase sqliteDatabase = null;

            if (databaseExists()) {
            /* Check for Upgrade */
            } else {
            /* Database does not exists create blank database */
                sqliteDatabase = this.getReadableDatabase();
                sqliteDatabase.close();

                try {
                    copyDataBase();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }

        /** Check Database if it exists */
        private boolean databaseExists() {

            SQLiteDatabase sqliteDatabase = null;
            try {
                String databasePath = DB_PATH + DB_NAME;
                sqliteDatabase = SQLiteDatabase.openDatabase(databasePath, null,
                        SQLiteDatabase.OPEN_READONLY);
            } catch (SQLiteException e) {
                e.printStackTrace();
            }

            if (sqliteDatabase != null) {
                sqliteDatabase.close();
            }
            return sqliteDatabase != null ? true : false;
        }

        /**
         * Copy existing database file in system
         */
        public void copyDataBase() throws IOException {

            InputStream myInput = context.getAssets().open(DB_NAME);
            File databasePath = new File(DB_PATH);
            if(!databasePath.exists())
            {
                databasePath.mkdirs();
            }
            String outFileName = DB_PATH +DB_NAME;
            OutputStream myOutput = new FileOutputStream(outFileName);
            byte[] buffer = new byte[1024];
            int length;
            while ((length = myInput.read(buffer)) > 0) {
                myOutput.write(buffer, 0, length);
            }
            myOutput.flush();
            myOutput.close();
            myInput.close();
        }
    }

}
